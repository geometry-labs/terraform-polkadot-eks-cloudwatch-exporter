

#containerPort: 9106

service:
  type: ClusterIP
  port: 9106
  portName: http
  annotations: {}
  labels: {}

#aws:
#  role:
#
#  # The name of a pre-created secret in which AWS credentials are stored. When
#  # set, aws_access_key_id is assumed to be in a field called access_key,
#  # aws_secret_access_key is assumed to be in a field called secret_key, and the
#  # session token, if it exists, is assumed to be in a field called
#  # security_token
#  secret:
#    name:
#    includesSessionToken: false
#
#  # Note: Do not specify the aws_access_key_id and aws_secret_access_key if you specified role or secret.name before
#  aws_access_key_id:
#  aws_secret_access_key:

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ${cloudwatch_exporter_service_account_name}
  # annotations:
  # Will add the provided map to the annotations for the crated serviceAccount
  # e.g.
  annotations:
    eks.amazonaws.com/role-arn: ${irsa_assumable_role}
#    arn:aws:iam::1234567890:role/prom-cloudwatch-exporter-oidc

rbac:
  # Specifies whether RBAC resources should be created
  create: true

config: |-
  # This is the default configuration for prometheus-cloudwatch-exporter
  region: ${region}
  period_seconds: 240
  metrics:
  - aws_namespace: AWS/AutoScaling
    aws_metric_name: GroupDesiredCapacity
    aws_dimensions: [AutoScalingGroupName]
    aws_statistics: [Average]

  - aws_namespace: AWS/AutoScaling
    aws_metric_name: GroupMinSize
    aws_dimensions: [AutoScalingGroupName]
    aws_statistics: [Average]

  - aws_namespace: AWS/AutoScaling
    aws_metric_name: GroupMaxSize
    aws_dimensions: [AutoScalingGroupName]
    aws_statistics: [Average]

  - aws_namespace: AWS/AutoScaling
    aws_metric_name: GroupInServiceInstances
    aws_dimensions: [AutoScalingGroupName]
    aws_statistics: [Average]

  - aws_namespace: AWS/AutoScaling
    aws_metric_name: GroupPendingInstances
    aws_dimensions: [AutoScalingGroupName]
    aws_statistics: [Average]

  - aws_namespace: AWS/AutoScaling
    aws_metric_name: GroupStandbyInstances
    aws_dimensions: [AutoScalingGroupName]
    aws_statistics: [Average]

  - aws_namespace: AWS/AutoScaling
    aws_metric_name: GroupTerminatingInstances
    aws_dimensions: [AutoScalingGroupName]
    aws_statistics: [Average]

  - aws_namespace: AWS/AutoScaling
    aws_metric_name: GroupTotalInstances
    aws_dimensions: [AutoScalingGroupName]
    aws_statistics: [Average]

  - aws_namespace: AWS/ELB
    aws_metric_name: HealthyHostCount
    aws_dimensions: [AvailabilityZone, LoadBalancerName]
    aws_statistics: [Average]

  - aws_namespace: AWS/ELB
    aws_metric_name: UnHealthyHostCount
    aws_dimensions: [AvailabilityZone, LoadBalancerName]
    aws_statistics: [Average]

  - aws_namespace: AWS/ELB
    aws_metric_name: RequestCount
    aws_dimensions: [AvailabilityZone, LoadBalancerName]
    aws_statistics: [Sum]

  - aws_namespace: AWS/ELB
    aws_metric_name: Latency
    aws_dimensions: [AvailabilityZone, LoadBalancerName]
    aws_statistics: [Average]

  - aws_namespace: AWS/ELB
    aws_metric_name: SurgeQueueLength
    aws_dimensions: [AvailabilityZone, LoadBalancerName]
    aws_statistics: [Maximum, Sum]

  - aws_namespace: AWS/Billing
    aws_metric_name: EstimatedCharges
    aws_dimensions: [ServiceName, LinkedAccount, Currency]
    aws_dimension_select:
      Currency: [USD]
    aws_statistics: [Sum]
    range_seconds: 86400

nodeSelector: {}

tolerations: []

affinity: {}

# Configurable health checks against the /healthy and /ready endpoints
livenessProbe:
  path: /-/healthy
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  path: /-/ready
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: false
  # Set the namespace the ServiceMonitor should be deployed
  # namespace: monitoring
  # Set how frequently Prometheus should scrape
  # interval: 30s
  # Set path to cloudwatch-exporter telemtery-path
  # telemetryPath: /metrics
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  # labels:
  # Set timeout for scrape
  # timeout: 10s
  # Set relabelings for the ServiceMonitor, use to apply to samples before scraping
  # relabelings: []
  # Set metricRelabelings for the ServiceMonitor, use to apply to samples for ingestion
  # metricRelabelings: []
  #
  # Example - note the Kubernetes convention of camelCase instead of Prometheus' snake_case
  # metricRelabelings:
  #   - sourceLabels: [dbinstance_identifier]
  #     action: replace
  #     replacement: mydbname
  #     targetLabel: dbname

prometheusRule:
  # Specifies whether a PrometheusRule should be created
  enabled: false
  # Set the namespace the PrometheusRule should be deployed
  # namespace: monitoring
  # Set labels for the PrometheusRule, use this to define your scrape label for Prometheus Operator
  # labels:
  # Example - note the Kubernetes convention of camelCase instead of Prometheus'
  # rules:
  #    - alert: ELB-Low-BurstBalance
  #      annotations:
  #        message: The ELB BurstBalance during the last 10 minutes is lower than 80%.
  #      expr: aws_ebs_burst_balance_average < 80
  #      for: 10m
  #      labels:
  #        severity: warning
  #    - alert: ELB-Low-BurstBalance
  #      annotations:
  #        message: The ELB BurstBalance during the last 10 minutes is lower than 50%.
  #      expr: aws_ebs_burst_balance_average < 50
  #      for: 10m
  #      labels:
  #        severity: warning
  #    - alert: ELB-Low-BurstBalance
  #      annotations:
  #        message: The ELB BurstBalance during the last 10 minutes is lower than 30%.
  #      expr: aws_ebs_burst_balance_average < 30
  #      for: 10m
  #      labels:
  #        severity: critical

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

securityContext:
  runAsUser: 65534  # run as nobody user instead of root
